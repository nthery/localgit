#!/usr/bin/env bash

# Copyright (c) 2016, Nicolas Thery (nthery@gmail.com)
#
# Maintain local git branches over sources managed with another SCM.
# See https://github.com/nthery/localgit for details.

# Bail out early if a command exits abnormally.
set -e

progname=$(basename $0)

commands=""

##############################################################################
# DEBUGGING
##############################################################################

# TODO: Disable when thorougly tested.
debug=1

# Enable shell tracing if debug mode set.
tron()
{
	if (( $debug > 0 )); then
		set -x
	fi
}

# Disable shell tracing if debug mode set.
troff()
{
	if (( $debug > 0 )); then
		set +x
	fi
}

##############################################################################
# ERROR MANAGEMENT
##############################################################################

error()
{
	echo 1>&2 "$progname: $*"
	exit 1
}

usage()
{
	local code=0
	if [[ -n "$*" ]]; then
		printf 1>&2 "$progname: $*\n\n"
		code=1
	fi
	printf 1>&2 "usage: $progname cmd args\n\n"
	printf 1>&2 "The supported commands are:\n\n$commands"
	exit $code
}

##############################################################################
# HELPERS
##############################################################################

expect_topic()
{
	if [[ "$(current_branch)" == "master" ]]; then
		error "should be in topic branch but in master"
	fi
}

expect_master()
{
	if [[ "$(current_branch)" != "master" ]]; then
		error "should be in master branch but in $(current_branch)"
	fi
}

current_branch()
{
	git branch | grep '^\*' | cut -d' ' -f2
}

# Print all files in repo.
all_files()
{
	git ls-tree --full-tree -r master | awk '{print $4}' | grep -vw .lg
}

##############################################################################
# init command
##############################################################################

commands="${commands}init - create local git\n"

do_init()
{
	local gitroot="$1"
	if [[ -n "$gitroot" ]]; then
		local parent="$(dirname $gitroot)"
		[[ -d "$parent" ]] || error "directory not found: $parent"
		[[ ! -d "$gitroot" ]] || error "directory already exists: $gitroot"
		pushd "$parent"
	fi

	tron

	git init

	# Create dummy initial commit.
	# Failing this initial lg-import from orphan topic branch fails.
	git commit --allow-empty -m 'lg: big bang'

	if [[ -n "$gitroot" ]]; then
		mv .git $(basename $gitroot)
		popd
		ln -s "$gitroot" .git
	fi
}

##############################################################################
# import command
##############################################################################

commands="${commands}import - add file to local git\n"

do_import()
{
	# Error out if some files do not exist or are already baselined.
	local f
	for f in $*; do
		[[ -f "$f" ]] || error "missing file: $f"
		if echo $(all_files) | grep -q -w "$f"; then
			error>&2 "file already baselined: $f"
		fi
	done

	expect_topic

    local topic=$(current_branch)
	tron

	git stash save lg-import: "$*"

	git checkout master

	git add $*

	git commit -m "lg: import"

	git checkout "$topic"

	git rebase master

	git stash pop
}

##############################################################################
# sync command
##############################################################################

commands="${commands}sync - rebase local master branch after sync'ing from remote SCM\n"

do_sync()
{
	expect_master

	local msg="lg: sync"
	if [[ -n "$*" ]]; then
		msg="$msg: $*"
	fi

	tron

	git add $(all_files)

	git commit -m "$msg"
}

##############################################################################
# status command
##############################################################################

commands="${commands}status - print status of files in local branches\n"

do_status()
{
	git status -uno
}

##############################################################################
# log command
##############################################################################

commands="${commands}log - run git log on local topic branch excluding local master\n"

do_log()
{
	expect_topic
	git log master.. $*
}

##############################################################################
# files command
##############################################################################

commands="${commands}files - print files in local topic branch\n"

do_files()
{
	expect_topic
	local rev="$*"
	if [[ -z "$rev" ]]; then
		rev="master...HEAD"
	fi
	git diff --stat "$rev" | awk '$2 == "|" { print $1 }'
}

##############################################################################
# MAIN PROGRAM
##############################################################################

(( $# > 0 )) || usage "missing command"

cmd=$1
shift

case "$cmd" in
init)		do_init $* ;;
i|import)	do_import $* ;;
sync)		do_sync $* ;;
s|status)	do_status $* ;;
f|files)	do_files $* ;;
log)		do_log $* ;;
help)		usage ;;
*)		usage "unknown command: $cmd" ;;
esac
