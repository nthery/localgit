#!/usr/bin/env bash
# vim: ts=8 sts=4 sw=4 et ft=sh

# Copyright (c) 2016, Nicolas Thery (nthery@gmail.com)
#
# Maintain local git branches over sources managed with another SCM.
# See https://github.com/nthery/localgit for details.

# Bail out early if a command exits abnormally.
set -e

progname=$(basename "$0")

commands=""

##############################################################################
# DEBUGGING
##############################################################################

# TODO: Disable when thorougly tested.
debug=1

# Enable shell tracing if debug mode set.
tron()
{
    if (( debug > 0 )); then
        set -x
    fi
}

# Disable shell tracing if debug mode set.
troff()
{
    if (( debug > 0 )); then
        set +x
    fi
}

##############################################################################
# ERROR MANAGEMENT
##############################################################################

error()
{
    echo 1>&2 "$progname: $*"
    exit 1
}

usage()
{
    local code=0
    if [[ -n "$*" ]]; then
        echo -e 1>&2 "$progname: $*\n"
        code=1
    fi
    echo -e 1>&2 "usage: $progname cmd args\n"
    echo -e 1>&2 "The supported commands are:\n"
    echo -e 1>&2 "$commands"
    exit $code
}

##############################################################################
# HELPERS
##############################################################################

expect_topic()
{
    if [[ "$(current_branch)" == "master" ]]; then
        error "should be in topic branch but in master"
    fi
}

expect_master()
{
    if [[ "$(current_branch)" != "master" ]]; then
        error "should be in master branch but in $(current_branch)"
    fi
}

current_branch()
{
    git branch | grep '^\*' | cut -d' ' -f2
}

# Print all files in repo.
all_files()
{
    git ls-tree --full-tree -r master | awk '{print $4}' | grep -vw .lg
}

start_non_local_git_root_creation()
{
    local -r name="$1"

    if [[ -n "$LG_GIT_DIR_PREFIX" ]]; then
        [[ -d "$LG_GIT_DIR_PREFIX" ]] || error "directory not found: $LG_GIT_DIR_PREFIX"
        local -r git_dir="$LG_GIT_DIR_PREFIX/${name}.git"
        [[ ! -d "$git_dir" ]] || error "directory already exists: $git_dir"
        pushd "$LG_GIT_DIR_PREFIX"
    fi
}

complete_non_local_git_root_creation()
{
    local -r name="$1"

    if [[ -n "$LG_GIT_DIR_PREFIX" ]]; then
        mv .git "${name}.git"
        popd
        local -r git_dir="$LG_GIT_DIR_PREFIX/${name}.git"
        git --git-dir "$git_dir" config core.worktree "$(pwd)"
        echo "gitdir: $(realpath "$git_dir")" > .git
    fi
}

##############################################################################
# init command
##############################################################################

commands="${commands}init - create local git\n"

lg_init()
{
    local opt
    local name
    while getopts ":r:n:" opt; do
        case $opt in
            n) name="$OPTARG" ;;
            :) error "option $OPTARG: missing argument" ;;
            *) error "bad option: $OPTARG" ;;
        esac
    done

    if [[ -z "$name" ]]; then
        name="$(basename "$(pwd)")"
    fi

    shift $(( OPTIND - 1 ))

    [[ ! -r .git ]] || error ".git already exists"

    start_non_local_git_root_creation "$name"

    tron

    git init

    # Create dummy initial commit.
    # Failing this initial lg-import from orphan topic branch fails.
    git commit --allow-empty -m 'lg: big bang'

    complete_non_local_git_root_creation "$name"

    # Switch to topic branch.
    git checkout -b "$name"
}

##############################################################################
# import command
##############################################################################

commands="${commands}import - add file to local git\n"

lg_import()
{
    # Error out if some files do not exist or are already baselined.
    local f
    for f in "$@"; do
        [[ -f "$f" ]] || error "missing file: $f"
        if all_files | grep -q -w "$f"; then
            error>&2 "file already baselined: $f"
        fi
    done

    expect_topic

    local -r topic=$(current_branch)

    local log="lg: import $*"

    # If commit log too long to fit in 80 columns, first strip directories.
    if (( ${#log} > (80 - 3) )); then
        log="lg: import"
        for f in "$@"; do
            log="$log $(basename $f)"
        done
    fi

    # If log still too long, truncate it.
    if (( ${#log} > (80 - 3) )); then
        log="${log:0:76}..."
    fi

    tron

    git stash save lg-import: "$*"

    git checkout master

    git add "$@"

    git commit -m "$log"

    git checkout "$topic"

    git rebase master

    git stash pop || true
}

##############################################################################
# sync command
##############################################################################

commands="${commands}sync - rebase local master branch after sync'ing from remote SCM\n"

lg_sync()
{
    expect_master

    local msg="lg: sync"
    if [[ -n "$*" ]]; then
        msg="$msg: $*"
    fi

    tron

    # shellcheck disable=SC2046
    git add $(all_files)

    git commit -m "$msg"
}

##############################################################################
# status command
##############################################################################

commands="${commands}status - print status of files in local branches\n"

lg_status()
{
    git status -uno
}

##############################################################################
# log command
##############################################################################

commands="${commands}log - run git log on local topic branch excluding local master\n"

lg_log()
{
    expect_topic
    git log master.. "$@"
}

##############################################################################
# files command
##############################################################################

commands="${commands}files - print files in local topic branch\n"

lg_files()
{
    expect_topic
    local rev="$*"
    if [[ -z "$rev" ]]; then
        rev="master...HEAD"
    fi

    git diff "$rev" | awk '
        function flush(action) { if (file != "") { print action, file; file = "" } }
        /^diff/ { flush("edit"); file = substr($3, 3) }
        /^new file/ { flush("add") }
        /^deleted file/ { flush("rm") }
        END { flush("edit") }
        '
}

##############################################################################
# clone command
##############################################################################

commands="${commands}clone - clone local git repo into another existing source tree\n"

lg_clone()
{
    local opt
    local dst
    while getopts ":r:" opt; do
        case $opt in
            r) dst="$OPTARG" ;;
            :) error "option $OPTARG: missing argument" ;;
            *) error "bad option: $OPTARG" ;;
        esac
    done

    shift $(( OPTIND - 1 ))

    local src="$1"
    [[ -n "$src" ]] || error "missing source repo"
    [[ -d "$src" ]] || error "source git repo does not exist: $src"

    start_non_local_git_root_creation "$dst"

    tron

    git init

    complete_non_local_git_root_creation "$dst"

    git remote add origin "$src"
    git fetch

    # Sync local master branch with remote one leaving local changes unmodified.
    git reset origin/master
}

##############################################################################
# MAIN PROGRAM
##############################################################################

(( $# > 0 )) || usage "missing command"

cmd=$1
shift

case "$cmd" in
    init)       lg_init "$@" ;;
    i|import)   lg_import "$@" ;;
    sync)       lg_sync "$@" ;;
    s|status)   lg_status "$@" ;;
    f|files)    lg_files "$@" ;;
    log)        lg_log "$@" ;;
    clone)      lg_clone "$@" ;;
    help)       usage ;;
    *)          usage "unknown command: $cmd" ;;
esac
