#!/usr/bin/env bash
# vim: ts=8 sts=4 sw=4 et ft=sh

# Copyright (c) 2016, Nicolas Thery (nthery@gmail.com)
#
# Maintain local git branches over sources managed with another SCM.
# See https://github.com/nthery/localgit for details.

# Bail out early if a command exits abnormally.
set -e

progname=$(basename "$0")

commands=""

##############################################################################
# DEBUGGING
##############################################################################

# TODO: Disable when thorougly tested.
debug=1

# Enable shell tracing if debug mode set.
tron()
{
    if (( debug > 0 )); then
        set -x
    fi
}

# Disable shell tracing if debug mode set.
troff()
{
    if (( debug > 0 )); then
        set +x
    fi
}

##############################################################################
# ERROR MANAGEMENT
##############################################################################

error()
{
    echo 1>&2 "$progname: $*"
    exit 1
}

usage()
{
    local code=0
    if [[ -n "$*" ]]; then
        echo -e 1>&2 "$progname: $*\n"
        code=1
    fi
    echo -e 1>&2 "usage: $progname cmd args\n"
    echo -e 1>&2 "The supported commands are:\n"
    echo -e 1>&2 "$commands"
    exit $code
}

##############################################################################
# HELPERS
##############################################################################

expect_topic()
{
    if [[ "$(current_branch)" == "master" ]]; then
        error "should be in topic branch but in master"
    fi
}

expect_master()
{
    if [[ "$(current_branch)" != "master" ]]; then
        error "should be in master branch but in $(current_branch)"
    fi
}

current_branch()
{
    git branch | grep '^\*' | cut -d' ' -f2
}

# Print all files in repo.
all_files()
{
    git ls-tree --full-tree -r master | awk '{print $4}' | grep -vw .lg
}

start_non_local_git_root_creation()
{
    local -r gitroot="$1"

    if [[ -n "$gitroot" ]]; then
        local -r parent="$(dirname "$gitroot")"
        [[ -d "$parent" ]] || error "directory not found: $parent"
        [[ ! -d "$gitroot" ]] || error "directory already exists: $gitroot"
        pushd "$parent"
    fi
}

complete_non_local_git_root_creation()
{
    local -r gitroot="$1"

    if [[ -n "$gitroot" ]]; then
        mv .git "$(basename "$gitroot")"
        popd
        ln -s "$gitroot" .git
    fi
}

##############################################################################
# init command
##############################################################################

commands="${commands}init - create local git\n"

do_init()
{
    local opt
    local gitroot
    local topic_branch
    while getopts ":r:b:" opt; do
        case $opt in
            r) gitroot="$OPTARG" ;;
            b) topic_branch="$OPTARG" ;;
            :) error "option $OPTARG: missing argument" ;;
            *) error "bad option: $OPTARG" ;;
        esac
    done

    shift $(( OPTIND - 1 ))

    [[ ! -d .git ]] || error "directory already exists: .git"

    start_non_local_git_root_creation "$gitroot"

    tron

    git init

    # Create dummy initial commit.
    # Failing this initial lg-import from orphan topic branch fails.
    git commit --allow-empty -m 'lg: big bang'

    complete_non_local_git_root_creation "$gitroot"

    if [[ -n "$topic_branch" ]]; then
        git checkout -b "$topic_branch"
    fi
}

##############################################################################
# import command
##############################################################################

commands="${commands}import - add file to local git\n"

do_import()
{
    # Error out if some files do not exist or are already baselined.
    local f
    for f in "$@"; do
        [[ -f "$f" ]] || error "missing file: $f"
        if all_files | grep -q -w "$f"; then
            error>&2 "file already baselined: $f"
        fi
    done

    expect_topic

    local -r topic=$(current_branch)
    tron

    git stash save lg-import: "$*"

    git checkout master

    git add "$@"

    git commit -m "lg: import"

    git checkout "$topic"

    git rebase master

    git stash pop
}

##############################################################################
# sync command
##############################################################################

commands="${commands}sync - rebase local master branch after sync'ing from remote SCM\n"

do_sync()
{
    expect_master

    local msg="lg: sync"
    if [[ -n "$*" ]]; then
        msg="$msg: $*"
    fi

    tron

    git add $(all_files)

    git commit -m "$msg"
}

##############################################################################
# status command
##############################################################################

commands="${commands}status - print status of files in local branches\n"

do_status()
{
    git status -uno
}

##############################################################################
# log command
##############################################################################

commands="${commands}log - run git log on local topic branch excluding local master\n"

do_log()
{
    expect_topic
    git log master.. "$@"
}

##############################################################################
# files command
##############################################################################

commands="${commands}files - print files in local topic branch\n"

do_files()
{
    expect_topic
    local rev="$*"
    if [[ -z "$rev" ]]; then
        rev="master...HEAD"
    fi
    git diff --stat "$rev" | awk '$2 == "|" { print $1 }'
}

##############################################################################
# clone command
##############################################################################

commands="${commands}clone - clone local git repo into another existing source tree\n"

do_clone()
{
    local opt
    local dst
    while getopts ":r:" opt; do
        case $opt in
            r) dst="$OPTARG" ;;
            :) error "option $OPTARG: missing argument" ;;
            *) error "bad option: $OPTARG" ;;
        esac
    done

    shift $(( OPTIND - 1 ))

    local src="$1"
    [[ -n "$src" ]] || error "missing source repo"
    [[ -d "$src" ]] || error "source git repo does not exist: $src"

    start_non_local_git_root_creation "$dst"

    tron

    git init

    complete_non_local_git_root_creation "$dst"

    git remote add origin "$src"
    git fetch

    # Sync local master branch with remote one leaving local changes unmodified.
    git reset origin/master
}

##############################################################################
# MAIN PROGRAM
##############################################################################

(( $# > 0 )) || usage "missing command"

cmd=$1
shift

case "$cmd" in
    init)       do_init "$@" ;;
    i|import)   do_import "$@" ;;
    sync)       do_sync "$@" ;;
    s|status)   do_status "$@" ;;
    f|files)    do_files "$@" ;;
    log)        do_log "$@" ;;
    clone)      do_clone "$@" ;;
    help)       usage ;;
    *)          usage "unknown command: $cmd" ;;
esac
